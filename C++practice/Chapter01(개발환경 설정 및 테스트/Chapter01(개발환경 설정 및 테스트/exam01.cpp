// 첫 번째 C+=프로그램 작성 및 테스트

#include<iostream>
// iostream이라는 헤더 파일을 헤더 파일을 포함시키라는 전처리기(선행처리기, preprocessor)이다.
// iostream 헤더 파일에는 표준 입출력에 필요한 클래스들과 객체들이 정의되어 있다.
// 따라서 cin과 cout과 같은 객체를 사용하려면 반드시 iostream 파일에 포함시켜야 한다.


using namespace std;
// using namespace std; 코드는 C++프로그램에서 변수의 이름이나 함수의 이름과 같은 수많은 이름(식별자)들이 사용되고
// 이들 이름들은 이름 공간(name space)라고 하는 영역으로 분리되어 저장되어 있다.
// C++에서 이름을 사용할 떄에는 반드시 "공간::이름"과 같이 공간명을 이름 앞에 붙여야 한다.
// 출력을 담당하는 객체인 cout은 std라고 하는 이름 공간에 속한다.
// 따라서 cout은 원칙적으로는 std::cout << "answkduf" << std::endl; 이렇게 적어야 한다.
// 결과론적으로 매번 std를 붙이는 것이 번거로움으로 이런 경우에 사용할 수 있는 것이 바로 using이라는 지시어이다.
// using namespace std; 은 바로 우리가 현재 사용하고 있는 이름 공간을 std로 설정하는 문장이다.
// 따라서 std 안에 모든 이름은 std를 생략하고 사용할 수 있다.


int main(void) {	
	// main은 함수명이다. int는 리턴값을 나타내고, 
	// ()안에는 매개변수(파라미터, 인자값, Arguments)가 들어오는 공간인데 void는 매개변수가 없다.
	// void는 비어있는 것을 의미한다.
	// main()함수는 프로젝트 내에서 오로지 하나만 존재해야 한다.
	// main()함수가 프로그램의 시작점이기 때문이다.


	cout << "나의 첫번째 C++프로그램" << endl;
	// 코드를 실행하면 실행 결과가 나의 첫번째 C++프로그램 이라는 문자열을 출력해주는 코드.
	// endl(end of line) 줄의 끝을 의미하고 개행을 시켜준다. \n과 동일.
	// cout : 콘솔 화면에 데이터를 출력하는 작업을 맡은 객체이다.
	// 화면에 데이터를 출력하려면 cout과 << 연산자를 사용하면 된다.
	// 어떠한 데이터도 << 연산자를 사용하여 출력할 수 있다.
	// 한 줄에 여러 개의 << 연산자를 사용해도 무방하다. 출력은 왼쪽에서 오른쪽으로 출력됨.

	cout << 10 << "개의 사과가 있습니다.";
	cout << 'a';


	// C언어도 C++에서 사용할 수 있다. #include<stdio.h>를 해주면 printf() 사용이 가능하다.


	return 0;
	// main()함수의 특수성으로 return문을 생략해도 되지만, 
	// 앞으로 사용자 정의 함수를 만들 때는 반드시 리턴타입과 동일한 return문을 작성해야 한다.
	// 운영체제가 프로그램을 CUP에게 실행하게끔 스케줄에 올려주고,
	// CPU가 작업큐에서 이 프로그램을 실행하게 되는 것이다.
	// 0이 정수값이고 리턴값이 int로 되어 있기 때문에 0을 준다.
	// 보통 0의 값은 프로그램이 정장적으로 종료했음을 알려준다.
}